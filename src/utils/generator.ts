import type { FoundComment } from '../common/types';

export function generateMarkdown(
	comments: FoundComment[],
	generatedAt = new Date(),
) {
	if (!comments || comments.length === 0) {
		return `# TODOs\n\n_No TODOs found._\n\n---\nGenerated: ${generatedAt.toISOString()}\n`;
	}

	const byFile = new Map<string, FoundComment[]>();
	for (const c of comments) {
		const arr = byFile.get(c.file) ?? [];
		arr.push(c);
		byFile.set(c.file, arr);
	}

	let out = '# TODOs (generated by comment-todo)\n\n';
	const files = Array.from(byFile.keys()).sort();
	for (const file of files) {
		out += `## ${file}\n\n`;
		const arr = byFile.get(file) || [];
		arr.sort((a, b) => a.line - b.line);
		for (const c of arr) {
			const metaParts: string[] = [];
			if (c.meta) {
				for (const [k, v] of Object.entries(c.meta)) {
					metaParts.push(`${k}:${v}`);
				}
			}
			const metaStr = metaParts.length
				? ` â€” _${metaParts.join(', ')}_`
				: '';
			const text = c.text || '_no message_';
			out += `- [${c.tag}] (line ${c.line}) ${text}${metaStr}\n`;
		}
		out += `\n`;
	}

	out += `---\nGenerated: ${generatedAt.toISOString()}\n`;
	return out;
}

export function generateJSON(
	comments: FoundComment[],
	generatedAt = new Date(),
) {
	return JSON.stringify(
		{
			generatedAt: generatedAt.toISOString(),
			total: comments.length,
			comments,
		},
		null,
		2,
	);
}
